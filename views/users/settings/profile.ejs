<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile Settings | UConnect</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="/css/main.css" rel="stylesheet">
    <style>
        .settings-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .settings-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            color: white;
            padding: 40px;
            margin-bottom: 30px;
            text-align: center;
        }

        .settings-header h1 {
            margin: 0;
            font-size: 2.5rem;
            font-weight: 700;
        }

        .settings-header p {
            margin: 10px 0 0 0;
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .settings-content {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 30px;
        }

        .settings-sidebar {
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            height: fit-content;
        }

        .settings-nav {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .settings-nav-item {
            margin-bottom: 10px;
        }

        .settings-nav-link {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 15px 20px;
            border-radius: 10px;
            color: #666;
            text-decoration: none;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .settings-nav-link:hover,
        .settings-nav-link.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            transform: translateX(5px);
        }

        .settings-nav-icon {
            font-size: 1.2rem;
        }

        .settings-main {
            background: white;
            border-radius: 15px;
            padding: 40px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .section-title {
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 30px;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
            font-size: 1rem;
        }

        .form-input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

        .form-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-help {
            font-size: 0.9rem;
            color: #666;
            margin-top: 5px;
        }

        .avatar-section {
            border: 2px dashed #e1e5e9;
            border-radius: 15px;
            padding: 30px;
            text-align: center;
            margin-bottom: 25px;
            transition: all 0.3s ease;
        }

        .avatar-section:hover {
            border-color: #667eea;
            background: #f8f9ff;
        }

        .current-avatar {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid #e1e5e9;
            margin-bottom: 20px;
        }

        .avatar-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border-radius: 10px;
            border: none;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-size: 1rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 2px solid #e1e5e9;
        }

        .btn-secondary:hover {
            background: #e9ecef;
            border-color: #ced4da;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
            transform: translateY(-2px);
        }

        .danger-zone {
            border: 2px solid #dc3545;
            border-radius: 15px;
            padding: 30px;
            margin-top: 40px;
            background: #fff5f5;
        }

        .danger-zone h3 {
            color: #dc3545;
            margin: 0 0 15px 0;
            font-size: 1.3rem;
        }

        .danger-zone p {
            color: #666;
            margin-bottom: 20px;
        }

        .file-input {
            display: none;
        }

        .privacy-section {
            background: #f8f9ff;
            border: 2px solid #e1e5e9;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
        }

        .privacy-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
        }

        .checkbox-group:last-child {
            margin-bottom: 0;
        }

        .checkbox {
            width: 20px;
            height: 20px;
            accent-color: #667eea;
        }

        .success-message {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
            padding: 15px 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        @media (max-width: 768px) {
            .settings-container {
                padding: 10px;
            }

            .settings-content {
                grid-template-columns: 1fr;
            }

            .settings-sidebar {
                order: 2;
                margin-top: 20px;
            }

            .settings-main {
                order: 1;
            }

            .avatar-buttons {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>
<body>
    <%- include('../../partials/navbar') %>
    <%- include('../../partials/flash-messages') %>

    <main class="main-content">
        <div class="settings-container">
            <!-- Settings Header -->
            <div class="settings-header">
                <h1>‚öôÔ∏è Settings</h1>
                <p>Customize your UConnect experience</p>
            </div>

            <!-- Settings Content -->
            <div class="settings-content">
                <!-- Sidebar Navigation -->
                <div class="settings-sidebar">
                    <ul class="settings-nav">
                        <li class="settings-nav-item">
                            <a href="/users/settings/profile" class="settings-nav-link active">
                                <span class="settings-nav-icon">üë§</span>
                                Profile Settings
                            </a>
                        </li>
                        <li class="settings-nav-item">
                            <a href="/users/settings/password" class="settings-nav-link">
                                <span class="settings-nav-icon">üîí</span>
                                Password & Security
                            </a>
                        </li>
                        <li class="settings-nav-item">
                            <a href="/users/settings/account" class="settings-nav-link">
                                <span class="settings-nav-icon">üõ°Ô∏è</span>
                                Account Settings
                            </a>
                        </li>
                    </ul>
                </div>

                <!-- Main Settings Panel -->
                <div class="settings-main">
                    <h2 class="section-title">
                        üë§ Profile Settings
                    </h2>

                    <!-- Profile Form -->
                    <form method="POST" action="/users/settings/profile" id="profileForm">
                        <!-- Avatar Section -->
                        <div class="avatar-section">
                            <img src="<%= user.avatarUrl %>" alt="Current Avatar" class="current-avatar" id="avatarPreview">
                            <h3>Profile Picture</h3>
                            <p>Your profile picture helps others recognize you on campus</p>
                            <div class="avatar-buttons">
                                <button type="button" class="btn btn-secondary" id="randomAvatarBtn">
                                    üé≤ Random Avatar
                                </button>
                                <button type="button" class="btn btn-secondary" id="uploadPhotoBtn">
                                    üìÅ Upload Photo
                                </button>
                                <button type="button" class="btn btn-danger" style="display: none;" id="removeAvatarBtn">
                                    üóëÔ∏è Remove
                                </button>
                            </div>
                        </div>

                        <!-- Username (Privacy-focused) -->
                        <div class="form-group">
                            <label for="username" class="form-label">Username (Privacy Mode)</label>
                            <input type="text" id="username" name="username" class="form-input"
                                   value="<%= user.username %>" required maxlength="20" pattern="[a-zA-Z0-9_]+">
                            <div class="form-help">This is how you appear to other students (for privacy). Only letters, numbers, and underscores allowed.</div>
                        </div>

                        <!-- Bio -->
                        <div class="form-group">
                            <label for="bio" class="form-label">Bio</label>
                            <textarea id="bio" name="bio" class="form-input" rows="4" maxlength="200"
                                      placeholder="Tell other students about yourself..."><%= user.bio || '' %></textarea>
                            <div class="form-help">Share a bit about yourself (max 200 characters)</div>
                        </div>

                        <!-- Privacy Settings -->
                        <div class="privacy-section">
                            <h3 class="privacy-title">üîí Privacy Settings</h3>
                            <div class="checkbox-group">
                                <input type="checkbox" id="profilePublic" name="profilePublic" class="checkbox"
                                       <%= user.privacy?.profilePublic !== false ? 'checked' : '' %>>
                                <label for="profilePublic">Make my profile visible to other students</label>
                            </div>
                            <div class="checkbox-group">
                                <input type="checkbox" id="showEmail" name="showEmail" class="checkbox"
                                       <%= user.privacy?.showEmail === true ? 'checked' : '' %>>
                                <label for="showEmail">Show my email to other students</label>
                            </div>
                            <div class="checkbox-group">
                                <input type="checkbox" id="allowMessages" name="allowMessages" class="checkbox"
                                       <%= user.privacy?.allowMessages !== false ? 'checked' : '' %>>
                                <label for="allowMessages">Allow other students to message me</label>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <button type="submit" class="btn btn-primary">
                            üíæ Save Changes
                        </button>
                    </form>

                    <!-- Hidden forms for avatar actions -->
                    <form method="POST" action="/users/settings/avatar" enctype="multipart/form-data" id="avatarUploadForm" style="display: none;">
                        <input type="file" id="avatarFile" name="avatar" accept="image/*">
                    </form>

                    <form method="POST" action="/users/settings/avatar-api" id="randomAvatarForm" style="display: none;">
                        <input type="hidden" id="avatarSeed" name="avatarSeed" value="">
                    </form>

                    <form method="POST" action="/users/settings/remove-avatar" id="removeAvatarForm" style="display: none;">
                    </form>

                    <!-- Danger Zone -->
                    <div class="danger-zone">
                        <h3>‚ö†Ô∏è Danger Zone</h3>
                        <p>These actions are permanent and cannot be undone.</p>
                        <a href="/users/settings/account" class="btn btn-danger">
                            üóëÔ∏è Delete Account
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <%- include('../../partials/footer') %>

    <script>
        // üî• GODLY POWERS: Avatar functionality
        function generateRandomAvatar() {
            console.log('üé≤ RANDOM AVATAR BUTTON CLICKED!');

            // Generate a more random seed using timestamp + random
            const timestamp = Date.now().toString(36);
            const randomPart = Math.random().toString(36).substring(2, 15);
            const randomSeed = timestamp + randomPart;
            const avatarUrl = `https://api.dicebear.com/9.x/adventurer/svg?seed=${randomSeed}`;

            console.log('üî• GODLY POWERS: Generating random avatar with seed:', randomSeed);
            console.log('üî• Avatar URL:', avatarUrl);
            console.log('üî• Timestamp used:', timestamp);

            // Update preview
            const avatarPreview = document.getElementById('avatarPreview');
            const avatarSeed = document.getElementById('avatarSeed');
            const randomForm = document.getElementById('randomAvatarForm');

            if (!avatarPreview) {
                console.error('‚ùå Avatar preview element not found!');
                return;
            }
            if (!avatarSeed) {
                console.error('‚ùå Avatar seed input not found!');
                return;
            }
            if (!randomForm) {
                console.error('‚ùå Random avatar form not found!');
                return;
            }

            console.log('üîÑ Updating avatar preview...');
            avatarPreview.src = avatarUrl;
            avatarSeed.value = randomSeed;

            // Hide remove button for API avatars
            const removeBtn = document.getElementById('removeAvatarBtn');
            if (removeBtn) {
                removeBtn.style.display = 'none';
            }

            console.log('üöÄ Submitting random avatar form...');
            console.log('üöÄ Form action:', randomForm.action);
            console.log('üöÄ Seed value being sent:', avatarSeed.value);
            // Submit the random avatar form
            randomForm.submit();
        }

        function uploadAvatar(input) {
            console.log('üìÅ UPLOAD AVATAR TRIGGERED!');
            console.log('üìÅ Input files:', input.files);

            if (input.files && input.files[0]) {
                const file = input.files[0];
                console.log('üî• GODLY POWERS: Uploading avatar file:', file.name);
                console.log('üìÅ File size:', file.size);
                console.log('üìÅ File type:', file.type);

                const reader = new FileReader();
                reader.onload = function(e) {
                    console.log('üìÅ File loaded successfully');
                    const avatarPreview = document.getElementById('avatarPreview');
                    const removeBtn = document.getElementById('removeAvatarBtn');

                    if (avatarPreview) {
                        avatarPreview.src = e.target.result;
                    }
                    if (removeBtn) {
                        removeBtn.style.display = 'inline-flex';
                    }
                };
                reader.readAsDataURL(file);

                console.log('üöÄ Submitting upload form...');
                // Submit the upload form
                const uploadForm = document.getElementById('avatarUploadForm');
                if (uploadForm) {
                    uploadForm.submit();
                } else {
                    console.error('‚ùå Upload form not found!');
                }
            } else {
                console.error('‚ùå No file selected');
            }
        }

        function removeAvatar() {
            console.log('ÔøΩÔ∏è REMOVE AVATAR CLICKED!');

            // Clear file input
            const avatarFile = document.getElementById('avatarFile');
            if (avatarFile) {
                avatarFile.value = '';
            }

            // Hide remove button
            const removeBtn = document.getElementById('removeAvatarBtn');
            if (removeBtn) {
                removeBtn.style.display = 'none';
            }

            console.log('üöÄ Submitting remove form...');
            // Submit the remove form
            const removeForm = document.getElementById('removeAvatarForm');
            if (removeForm) {
                removeForm.submit();
            } else {
                console.error('‚ùå Remove form not found!');
            }
        }

        // Debug: Check if all elements are present on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üî• Page loaded, checking elements...');

            const elements = {
                'avatarPreview': document.getElementById('avatarPreview'),
                'avatarFile': document.getElementById('avatarFile'),
                'avatarSeed': document.getElementById('avatarSeed'),
                'randomAvatarForm': document.getElementById('randomAvatarForm'),
                'avatarUploadForm': document.getElementById('avatarUploadForm'),
                'removeAvatarForm': document.getElementById('removeAvatarForm'),
                'removeAvatarBtn': document.getElementById('removeAvatarBtn'),
                'randomAvatarBtn': document.getElementById('randomAvatarBtn'),
                'uploadPhotoBtn': document.getElementById('uploadPhotoBtn')
            };

            Object.keys(elements).forEach(key => {
                if (elements[key]) {
                    console.log(`‚úÖ ${key} found`);
                } else {
                    console.error(`‚ùå ${key} NOT FOUND!`);
                }
            });

            // ‚ö° THUNDER GOD DEBUG: Check if file input is clickable
            const fileInput = document.getElementById('avatarFile');
            if (fileInput) {
                console.log('‚ö° File input properties:');
                console.log('‚ö° File input type:', fileInput.type);
                console.log('‚ö° File input accept:', fileInput.accept);
                console.log('‚ö° File input style display:', fileInput.style.display);
                console.log('‚ö° File input disabled:', fileInput.disabled);
                console.log('‚ö° File input readOnly:', fileInput.readOnly);
            }

            Object.keys(elements).forEach(key => {
                if (elements[key]) {
                    console.log(`‚úÖ ${key} found`);
                } else {
                    console.error(`‚ùå ${key} NOT FOUND!`);
                }
            });

            // Add event listeners for avatar buttons
            const randomAvatarBtn = document.getElementById('randomAvatarBtn');
            const uploadPhotoBtn = document.getElementById('uploadPhotoBtn');
            const removeAvatarBtn = document.getElementById('removeAvatarBtn');
            const avatarFileInput = document.getElementById('avatarFile');

            if (randomAvatarBtn) {
                randomAvatarBtn.addEventListener('click', function() {
                    console.log('üé≤ Random Avatar button clicked via event listener!');
                    generateRandomAvatar();
                });
                console.log('‚úÖ Random Avatar button event listener added');
            }

            if (uploadPhotoBtn) {
                uploadPhotoBtn.addEventListener('click', function() {
                    console.log('üìÅ Upload Photo button clicked via event listener!');
                    const fileInput = document.getElementById('avatarFile');
                    if (fileInput) {
                        console.log('üìÅ Triggering file input click...');
                        console.log('üìÅ File input element:', fileInput);
                        console.log('üìÅ File input visible:', fileInput.offsetParent !== null);
                        console.log('üìÅ File input in DOM:', document.contains(fileInput));

                        // ‚ö° THUNDER GOD FORCE CLICK!
                        try {
                            fileInput.click();
                            console.log('‚ö° File input click executed successfully!');
                        } catch (error) {
                            console.error('‚ùå Error clicking file input:', error);
                        }
                    } else {
                        console.error('‚ùå File input not found!');
                    }
                });
                console.log('‚úÖ Upload Photo button event listener added');
            }

            if (removeAvatarBtn) {
                removeAvatarBtn.addEventListener('click', function() {
                    console.log('üóëÔ∏è Remove Avatar button clicked via event listener!');
                    removeAvatar();
                });
                console.log('‚úÖ Remove Avatar button event listener added');
            }

            // ‚ö° GODLY POWERS: Add file input change listener
            if (avatarFileInput) {
                avatarFileInput.addEventListener('change', function() {
                    console.log('üìÅ File input changed via event listener!');
                    uploadAvatar(this);
                });
                console.log('‚úÖ File input change event listener added');
            }

            console.log('üî• Element check complete');
        });

        // Character counter for bio
        document.getElementById('bio').addEventListener('input', function() {
            const maxLength = 200;
            const currentLength = this.value.length;
            const helpText = this.nextElementSibling;
            helpText.textContent = `Share a bit about yourself (${currentLength}/${maxLength} characters)`;

            if (currentLength > maxLength - 20) {
                helpText.style.color = '#dc3545';
            } else {
                helpText.style.color = '#666';
            }
        });

        // Username validation
        document.getElementById('username').addEventListener('input', function() {
            const username = this.value.toLowerCase();
            const helpText = this.nextElementSibling;

            if (!/^[a-zA-Z0-9_]+$/.test(username)) {
                helpText.textContent = 'Username can only contain letters, numbers, and underscores';
                helpText.style.color = '#dc3545';
            } else if (username.length < 3) {
                helpText.textContent = 'Username must be at least 3 characters';
                helpText.style.color = '#dc3545';
            } else {
                helpText.textContent = 'This is how you appear to other students (for privacy). Only letters, numbers, and underscores allowed.';
                helpText.style.color = '#666';
            }
        });

        console.log('üî• GODLY POWERS: Profile settings loaded successfully!');
    </script>
    <script src="/js/main.js"></script>
</body>
</html>
